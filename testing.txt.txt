El Testing de Software es toda una disciplina de la ingeniería de software que permite tener procesos, métodos de trabajo y herramientas para identificar oportunamente los defectos en el software y logrando la estabilidad del mismo.
Contrario a lo que se pensaba hace alrededor de 10 años, el Testing no es una actividad que se realiza al final del desarrollo del software, sino que va paralelo a su construcción, permitiendo que lo que se está desarrollando, se realice de manera correcta y conforme a las necesidades del usuario final. De ahí radica su importancia, pues es una forma de prevenir o inclusive de corregir posibles desviaciones del software antes de que ocurran de cara al usuario final. Era erróneo pensar que el Testing se realizaba al final, cuando ya el software estaba codificado y justo antes de entregarlo a la operación, actualmente el Testing de software se hace desde el inicio del proceso lo que permite acortar los tiempos de salida al mercado y fortalecer la reputación e imagen de las corporaciones.        Con el fin de regular y estandarizar los procesos de pruebas de software existen el TMMI y la Norma ISO 25000 entre otras, que regulan todos los conceptos a nivel de calidad de software, e indica que el producto no es lo que se entrega al final, si no cada entregable intermedio del proceso de desarrollo de software.
Según la ISTQB(International Software Testing Qualifications Board) el testing de software es importante por las siguiente razones:
-Permite identificar errores durante las fases de desarroolo
-Asegura la confianza del usuario final y su satisfacción al usar el software
-Permite asegurar la calidad del producto y su correcto funcionamiento.
-Es necesario para mantener la reputación del negocio en el sector.
El Software hace parte del día a día y solo por mencionar algunos ejemplos: se interactúa a través del celular, en el cajero del banco, en el supermercado, para solicitar un medio de transporte, a la hora de viajar, etc. Y en el mundo de los negocios, el software es aún más vital, cuando el software falla causa pérdidas incalculables de todo tipo: de tiempo, dinero, imagen, reputación e incluso pérdidas irreparables, por ejemplo, una falla en el Marcapasos o el dosificador de medicinas, podría ocasionar pérdidas de vidas humanas.
Por eso mismo hay  que asegurar que el proyecto que entreguemos esté libre de errores. Cuando se avanza de forma precipitada es cuando precisamente se cometen más fallos.
 El concepto de QA surge de dicho compromiso de calidad. Todo equipo de desarrollo debería contar con al menos un responsable encargado de asegurar el correcto funcionamiento del software que se desarrolla. No debe interpretarse como alguien que constantemente está corrigiendo lo que hacen mal los desarrolladores, sino como un facilitador para la realización de pruebas de testing que demanda el software. 
A la hora de definir un plan de testing debemos recopilar los requisitos funcionales que definen el alcance del proyecto. Esto es el núcleo que conforma la parte del negocio que fijamos con el cliente y los usuarios.
Fijar un tiempo claro de pruebas, preferiblemente desde el inicio. Aunque el proyecto vaya mal en tiempo o en costes nunca hay que recortar el tiempo de pruebas. Hay que asegurar que el proyecto que entreguemos esté libre de errores. Cuando se avanza de forma precipitada es cuando precisamente se cometen más fallos.
Es muy recomendable involucrar a los usuarios claves que han participado en la definición de los requisitos de las aplicaciones. Recoger feedback frecuentemente.
Tener en cuenta los test de regresión: cuando se corrija un error debemos volver a testear todo. Es fundamental asegurarnos que no se haya roto nada por otro lado.
No debemos olvidar las pruebas de carga, es la única forma de que probemos al 100% que toda la parte técnica funciona correctamente. Es decir, que la infraestructura sea capaz de dar soporte al número de usuarios esperado. La escalabilidad es un tema clave en grandes proyectos de software.
Y por último, recuerda mantener estables tus entornos de pruebas: pre-producción y staging. Nunca hagas pruebas en producción. Ten en cuenta que puedes ocasionar problemas reales a los usuarios actuales. 
Los usuarios pueden preferir comprar un producto de la competencia en lugar de un producto de baja calidad, lo que puede resultar en una pérdida de ingresos para la organización. En el mundo actual, la calidad es una de las principales prioridades de cualquier organización.


